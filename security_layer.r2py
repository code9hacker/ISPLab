"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE = "type"
ARGS = "args"
RETURN = "return"
EXCP = "exceptions"
TARGET = "target"
FUNC = "func"
OBJC = "objc"


class ABFile():
    def __init__(self, filename, create):
        # globals
        mycontext['debug'] = False
        # local (per object) reference to the underlying file
        self.Afn = filename + '.a'
        self.Bfn = filename + '.b'

        # make the files and add 'SE' to the readat file...
        if create:
            self.Afile = openfile(self.Afn, create)
            self.Bfile = openfile(self.Bfn, create)
            self.Afile.writeat('SE', 0)

    def writeat(self, data, offset):
        # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data, offset)

    def readat(self, bytes, offset):
        # Read from the A file using the sandbox's readat...
        return self.Afile.readat(bytes, offset)

    def close(self):
        self._check_and_update()
        self.Afile.close()
        self.Bfile.close()

    def _check_and_update(self):
        self._first_char = ''
        self._last_char = ''
        with self.Bfile as f:
            while 1:
                char = f.read(1)
                if not char:
                    break
                if self._first_char is '':
                    self._first_char = char

            self._last_char = char

        if self._first_char is 'S' and self._last_char is 'E':
            self.Afile.truncate(0)
            self.Afile.writeat(self.Bfile.readat(None, 0), 0)


def ABopenfile(filename, create):
    return ABFile(filename, create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type": ABFile,
                "name": "ABFile",
                "writeat": {"type": "func", "args": (str, int), "exceptions": Exception, "return": (int, type(None)),
                            "target": ABFile.writeat},
                "readat": {"type": "func", "args": ((int, type(None)), (int)), "exceptions": Exception, "return": str,
                           "target": ABFile.readat},
                "close": {"type": "func", "args": None, "exceptions": None, "return": (bool, type(None)),
                          "target": ABFile.close}
                }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE: OBJC, ARGS: (str, bool), EXCP: Exception, RETURN: sec_file_def,
                                   TARGET: ABopenfile}

# Execute the user code
secure_dispatch_module()
